import { Injectable, Inject } from '@angular/core';
import { JwtHelperService } from './jwthelper.service';
import { JWT_OPTIONS } from './jwtoptions.token';
var JwtInterceptor = (function () {
    function JwtInterceptor(config, jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.tokenGetter = config.tokenGetter;
        this.headerName = config.headerName || 'Authorization';
        this.authScheme = config.authScheme || 'Bearer ';
        this.whitelistedDomains = config.whitelistedDomains || [];
        this.skipWhenExpired = config.skipWhenExpired;
    }
    JwtInterceptor.prototype.isWhitelistedDomain = function (request) {
        var requestUrl = new URL(request.url);
        return this.whitelistedDomains.indexOf(requestUrl.host) > -1;
    };
    JwtInterceptor.prototype.intercept = function (request, next) {
        var token = this.tokenGetter();
        var tokenIsExpired = this.jwtHelper.isTokenExpired();
        if (tokenIsExpired && this.skipWhenExpired) {
            request = request.clone();
        }
        else if (token && this.isWhitelistedDomain(request)) {
            request = request.clone({
                setHeaders: (_a = {},
                    _a[this.headerName] = "" + this.authScheme + token,
                    _a)
            });
        }
        return next.handle(request);
        var _a;
    };
    return JwtInterceptor;
}());
export { JwtInterceptor };
JwtInterceptor.decorators = [
    { type: Injectable },
];
/** @nocollapse */
JwtInterceptor.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [JWT_OPTIONS,] },] },
    { type: JwtHelperService, },
]; };
